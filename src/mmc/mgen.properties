
#
# Included at the start of every good apachi module
#

MODULE_INCLUDES

   #include <unistd.h>
   #include <sys/mman.h>
   #include <sys/types.h>
   #include <sys/stat.h>
   #include <fcntl.h>

   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/shm.h>

   #include "memory.h"
   #include "stringbuffer.h"
   #include "jumptable.h"

   #include "mman.h"
   #include "runtime.h"
   #include "timer.h"
   #include "module.h"
   #include "mxstring.h"
   #include "excpfn.h"
   #include "memsw.h"

   module ${MOD_NAME}_module;
#
# Module Init
#

MODULE_INIT

   typedef struct mod_${MOD_NAME}_Config{
      table* options;
   } mod_${MOD_NAME}_config;

   static const char* ${MOD_NAME}_setOption(cmd_parms *parms,void *mconfig,char* arg1,char* arg2);

   static const command_rec ${MOD_NAME}_cmds[] =
   {
      {
         "${CAPITALIZED_MOD_NAME}Option",                 /* directive */
         ${MOD_NAME}_setOption,                           /* configuration routine */
         NULL,                                            /* extra arguments */
         OR_ALL,                                          /* directive location flags */
         TAKE12,                                          /* argument handler flag */
         "${MOD_NAME}Option <Option Name> <Option Value>" /* usage */
      },
      {NULL}
   };

   int globalSharedHeapSize = 0;
   int globalStatesPerSession = 0;
   time_t globalSessionTimeout = 0;
   char* globalLockDir = NULL;

   static char* ${MOD_NAME}_setLockDir(pool* p,char* lockdir_option){

     char* lockdir = (char*)ap_pcalloc(p,strlen(lockdir_option)+1);
     strcpy(lockdir,lockdir_option);
      
     return lockdir;
   }

   static const char* ${MOD_NAME}_setOption(cmd_parms *parms,void *mconfig,char* arg1, char* arg2){
      mod_${MOD_NAME}_config* cfg;

      cfg = (mod_${MOD_NAME}_config*)mconfig;

      if(arg2 != NULL)
         ap_table_set(cfg->options, arg1, arg2);
      else
         ap_table_set(cfg->options, arg1, "TRUE");


      /* Wretched Wretched Apache Initializer ... I will force you
         to do my bidding I will... (There ain't no such thing as
         a global initializer in Apache) */

      if(!strcmp(arg1,"SharedHeapSize") && arg2 != NULL) {
         int sharedHeapSize = atoi(arg2);
         int multiplier =1;

         if (strlen(arg2) > 1){
            if(arg2[strlen(arg2) -1] == 'M')
               multiplier = 1024*1024;
            else if(arg2[strlen(arg2) -1] == 'K')
               multiplier = 1024;
         }

         if (globalSharedHeapSize < sharedHeapSize * multiplier)
            globalSharedHeapSize = sharedHeapSize * multiplier;
      }

      if(!strcmp(arg1,"Session.Timeout") && arg2 != NULL) {
         int sessionTimeout = atoi(arg2);
       
         if (globalSessionTimeout < sessionTimeout)
            globalSessionTimeout = sessionTimeout;
      }
 
      if(!strcmp(arg1,"Session.StatesPerSession") && arg2 != NULL) {
         int statesPerSession = atoi(arg2);
 
         if (globalStatesPerSession < statesPerSession)
            globalStatesPerSession = statesPerSession;
      }

      if(!strcmp(arg1,"LockDir") && arg2 != NULL){
	globalLockDir = ${MOD_NAME}_setLockDir(parms->pool,arg2);
      }

      return NULL;
   }

   static void * ${MOD_NAME}_create_directory_config(pool* p, char *dir){
      mod_${MOD_NAME}_config* cfg =
         (mod_${MOD_NAME}_config*) ap_pcalloc(p,sizeof(mod_${MOD_NAME}_config));

      cfg->options = ap_make_table(p,10);

      return (void*)cfg;
   }

   static void * ${MOD_NAME}_create_server_config(pool* p, server_rec *s){
      mod_${MOD_NAME}_config* cfg =
         (mod_${MOD_NAME}_config*) ap_pcalloc(p,sizeof(mod_${MOD_NAME}_config));

      cfg->options = ap_make_table(p,10);

      return (void*)cfg;
   }

   void ${MOD_NAME}_initializer(server_rec *s, pool *p)
   {
      mod_${MOD_NAME}_config* cfg;

      #ifdef MODULE_VERSION
         ap_add_version_component(MODULE_VERSION);
      #endif

      /* Set the heap size */

      if(globalSharedHeapSize > 0) 
         shared_init(globalSharedHeapSize);
      else
         shared_init(32*1024*1024);
 
      stacktrace_init();
            
      /* err_init();
         log_init(LOG_LEVEL); FIXME: do I need these ? */

      mman_init();

      if(globalSessionTimeout > 0 )
         if(globalStatesPerSession > 0)
            ctxt_init(globalSessionTimeout,globalStatesPerSession);
         else
            ctxt_init(globalSessionTimeout,50); 
      else
         if(globalStatesPerSession > 0)
            ctxt_init(30*60,globalStatesPerSession);
         else
            ctxt_init(30*60,50);

      cook_init();      

      return;
   }

   StringBuffer* out;

   void ${MOD_NAME}_child_init(server_rec *s, pool *p)
   {
      shared_initLocking(globalLockDir);
      mman_initLocking(globalLockDir);
      ctxt_initLocking(globalLockDir);
      stacktrace_init();
   }

#
# Memory debugging functions
#

MODULE_DEBUG

   extern RangeTreeNode** FREE_RANGE_ROOT;
   extern RangeTreeNode** ALLOCATED_RANGE_ROOT;
   extern void** LOW_MEMORY;

   extern void* HIGH_MEMORY;
   extern void* BASE_ADDRESS;

   void ap_debugTree(request_rec *r, RangeTreeNode* rtn, int depth)
   {
      int i;

      if (rtn == NULL)
         return;

      ap_debugTree(r, rtn->lowerRange,depth+1);

      for(i=0;i<depth;i++)
         ap_rprintf(r,"&nbsp; ");

      ap_rprintf(r, "|[%u,%u)| = %u<br>\n",
         rtn->startAddress,
         rtn->endAddress,
         (rtn->endAddress-rtn->startAddress)
      );

      ap_debugTree(r, rtn->higherRange,depth+1);

   }

   void ap_debug(request_rec *r)
   {
      ap_rprintf(r,"<p>Free Range Tree : <br>\n");
      ap_debugTree(r,*FREE_RANGE_ROOT,1);
      ap_rprintf(r,"<p>Allocated Range Tree : <br>\n");
      ap_debugTree(r,*ALLOCATED_RANGE_ROOT,1);
      ap_rprintf(r,"<p>According to lo-mem we have %u nodes allocated<p>",
         (HIGH_MEMORY - 4*sizeof(void*) - sizeof(RangeTreeNode) - *LOW_MEMORY)/
         sizeof(RangeTreeNode)) ;
   }

#
#
#

MODULE_TEMPLATE_MATCHING

   inline static int strmatch(MJTable* mjt,char* s){
      short state=mjt->start, length= strlen(s);

      while(1){
         MJTrans* mjtrans;
         short column;

         column = mjt->columns[state];
         mjtrans = &mjt->transitions[ (state<<7) + (column<length ? s[column] : '\0') ];

         if (mjtrans->match >= 0){
            return (strcmp(s,mjt->argv[mjtrans->match]) == 0) ? mjtrans->match : -1;
         } else if (mjtrans->jump < 0) {
            return -1;
         } else {
            state = mjtrans->jump;
         }
      }
   }

MODULE_HANDLER

   static int ${MOD_NAME}_handler(request_rec *r)
   {
      char* location;
      char* template_name;
      int template_number;
      int redirect=0;
      mod_${MOD_NAME}_config* cfg;
 
      startTimer();

      /* Make sure this was a get or a post */

      r->allowed |= (1 << M_GET) | (1 << M_POST);

      if (r->method_number != M_GET && r->method_number != M_POST)
         return DECLINED;

      if (
            ( cfg = (mod_${MOD_NAME}_config*)ap_get_module_config(
               r->per_dir_config,&${MOD_NAME}_module )
            ) != NULL && 
            ( 
               location = (char*)ap_table_get(cfg->options,"Location") 
            ) != NULL
         ) {
         
         if(strncmp(r->uri,location,strlen(location)) == 0){
            template_name = r->uri + strlen(location);
         } else {
            return DECLINED;
         }
      }
      else {
         template_name = r->uri;
      }

      if (template_name == NULL)        {
         return DECLINED;
      }

      if (template_name[0] == '/') {
         template_name++;
      }

      template_number = mjtab_strmatch(&template,template_name);

      if (template_number<0) {
         return DECLINED;
      }

      /* set the response type to text/html */

      r->content_type = "text/html";

      /* Ok, I think we can send the header now and stop if that was all
         they wanted */

      if (r->header_only){
         ap_send_http_header(r);
         return 0;
      }

      /* Initialize the state, parse MIME parts and Cookies etc... */
      req_init(r,cfg->options);

		/* Install signal handlers for SignalsThrowException Option */
		installSignalHandlers();
	
      /* Initialize the runtime (well, it's mpool really) */
      rtime_init();

      /* Initialize the output buffer */
      out = buf_create(4096); 

      TRY{
         template_functions[template_number](out);

			if(!headers_already_sent)
				ap_send_http_header(r);
         
         {
				int totalBytesWritten = 0;
				char* data = buf_data(out);            
				int bytesToWrite = buf_size(out);
				
				while (totalBytesWritten < bytesToWrite) {
					int bytesWritten = 0;
					bytesWritten = 
						ap_rwrite(
						data + totalBytesWritten, 
						bytesToWrite-totalBytesWritten, 
						r
						);
					totalBytesWritten += bytesWritten;
				}
			}
      }
      CATCH("HTTPRedirectException"){
         redirect=1;
      }
      CATCH_ALL{
      
      	/* Log the exception */
			
			ap_log_error(
				APLOG_MARK,
				APLOG_NOERRNO|APLOG_ERR,
				r->server,
				"Uncaught %s\n    message: %s\n\n%s",
				excp_getCurrentException()->t,
				excp_getCurrentException()->msg,
				excp_getCurrentException()->stacktrace
			);
			
			/* Output the exception */
			
         ap_send_http_header(r);
         ap_rprintf(r, "<PRE>Uncaught %s\n    message: %s\n\n%s</PRE>",
				excp_getCurrentException()->t,
				excp_getCurrentException()->msg,
				excp_getCurrentException()->stacktrace
			);
      }
      END_TRY

      /* buf_clear(out); */ /* Can't do this, the memory leak is too large when children are killed */
      /* rtime_clearMPool(); */ /* Can't do this, the memory leak is too large when children are killed */

      buf_free(out);

      rtime_cleanup();

		/* Return the signal handler for SIGSEGV to it's old state */
		unInstallSignalHandlers();
 	
      /* Free the cookies, parts etc ... */
      req_cleanup();

      logExecutionTime(r,template_name,readTimer());

      if (redirect)
         return REDIRECT;
      return OK;
   }

MODULE_END

   static const handler_rec ${MOD_NAME}_handlers[] =
   {
       {"${MOD_NAME}", ${MOD_NAME}_handler},
       {NULL}
   };

   module MODULE_VAR_EXPORT ${MOD_NAME}_module =
   {
       STANDARD_MODULE_STUFF,
       ${MOD_NAME}_initializer,			/* initializer */
       ${MOD_NAME}_create_directory_config,	/* create per-directory config structure */
       NULL,                       		/* merge per-directory config structures */
       ${MOD_NAME}_create_server_config,	/* create per-server config structure */
       NULL,                       		/* merge per-server config structures */
       ${MOD_NAME}_cmds,                   	/* command table */
       ${MOD_NAME}_handlers,       		/* handlers */
       NULL,                       		/* translate_handler */
       NULL,                       		/* check_user_id */
       NULL,                       		/* check auth */
       NULL,                       		/* check access */
       NULL,                       		/* type_checker */
       NULL,                       		/* pre-run fixups */
       NULL,                       		/* logger */
       NULL,                       		/* header parser */
       ${MOD_NAME}_child_init,     		/* child_init */
       NULL,                       		/* child_exit */
       NULL                        		/* post read-request */
   };


